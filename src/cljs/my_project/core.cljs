(ns my-project.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]
   [reagent.core :as r]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]
    ["/kairi" :kairi]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to my-project"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of my-project"]]
      [:li [:a {:href "/borken/link"} "Borken link"]]]]))


(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of my-project"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of my-project")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About my-project"]]))

(def clicked (r/atom 0))
(def secs (r/atom 0))

(defn kairi-page []
  
  (fn [] 
          [:section 
          [:h1 "Button clicking game!"]
            [:p {:style {:color "red"}} "(Clojure is... weird) "]
            [:p @clicked]
            [:div 
              [:strike "How many times can you click this button in a minute"]
              [:p "How many clicks does it take to break your browser >:)"]
            ]
            [:input {:type "button" :value "Click me!"
            :on-click #(swap! clicked inc)}]
            [:input {:style {:margin-left 5} :type "button" :value "Reset!"
            :on-click #(reset! secs 0)}]
            [:p @secs]
            (js/setTimeout #(swap! secs + 1) 1000)
            
          ]
          
         ))


(println "Hello, world!")


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page
    :kairi #'kairi-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About my-project"] " | " 
         [:a {:href (path-for :kairi)} "Kairi page is here"]]]
       [page]
       [:footer
        [:p "my-project was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
